{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","imagesArr","props","images","countImages","isTransition","isNext","this","infinite","animationDuration","setTimeout","updateImagesArr","setState","step","slice","frameSize","countSteps","leftSpace","length","Math","min","max","itemWidth","className","type","disabled","onClick","prevMove","style","width","transform","transitionDuration","map","image","src","alt","nextMove","React","Component","App","name","value","onChange","event","Number","target","htmlFor","id","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85f45a93.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\ntype State = {\n  imagesArr: string[];\n  countImages: number;\n  isTransition: boolean;\n  isNext: boolean;\n};\n\n// export const Carousel: React.FC<Props> = ({\n//   images,\n//   step,\n//   frameSize,\n//   itemWidth,\n//   animationDuration,\n//   infinite,\n// }) => {\n//   console.log('__________');\n//\n//   const [countImages, setCountImages] = useState(0);\n//   const [newImagesArr, setNewImagesArr] = useState(images);\n//\n//   // useEffect(() => {\n//   //   if (infinite && countImages + step >= images.length - step) {\n//   //     setNewImagesArr(old => {\n//   //       return [...old.slice(step), ...old.slice(0, step)];\n//   //     });\n//   //\n//   //     // setCountImages(count => count - step);\n//   //   } else if (infinite && countImages < 0) {\n//   //     setNewImagesArr(old => {\n//   //       return [...old.slice(old.length - step),\n//   //         ...old.slice(0, old.length - step)];\n//   //     });\n//   //\n//   //     setCountImages(count => count + step);\n//   //   }\n//   //   console.log('effect');\n//   // }, [countImages]);\n//\n//   useEffect(() => {\n//     // setNewImagesArr(old => {\n//     //   return [...old.slice(old.length - step),\n//     //     ...old.slice(0, old.length - step)];\n//     // });\n//\n//\n//     if (infinite && countImages === 0) {\n//       setNewImagesArr(old => {\n//         return [...old.slice(old.length - step),\n//           ...old.slice(0, old.length - step)];\n//       });\n//       console.log(countImages);\n//       setCountImages(step);\n//\n//       //\n//     //   setCountImages(step);\n//     //\n//     // } else if (infinite && countImages > step) {\n//     //   setNewImagesArr(old => {\n//     //     return [...old.slice(step), ...old.slice(0, step)];\n//     //   });\n//     //   // setCountImages(count => count + step);\n//     // } else {\n//     //\n//     }\n//     console.log(`effect - ${countImages}`);\n//   }, [countImages, infinite]);\n//\n//   const nextMove = () => {\n//     console.log('next');\n//\n//     const countSteps = countImages + step;\n//     const leftSpace = images.length - frameSize < step\n//     || images.length - step <= step\n//       ? images.length - Math.min(frameSize, step)\n//       : Math.min(images.length - step, images.length - frameSize);\n//\n//     setCountImages(Math.min(countSteps, leftSpace));\n//     // setTimeout(() => {\n//     //   setCountImages(count => count + step);\n//     //   console.log('AND-next');\n//     // }, 1000);\n//   };\n//\n//   const prevMove = () => {\n//     const countSteps = countImages - step;\n//\n//     if (infinite) {\n//       setCountImages(countSteps);\n//     } else {\n//       setCountImages(Math.max(countSteps, 0));\n//     }\n//   };\n//\n//   console.log(`RENDER`);\n//\n//\n//   return (\n//     <div className=\"Carousel\">\n//       {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n//       <button\n//         type=\"button\"\n//         disabled={!infinite ? countImages === 0 : false}\n//         className=\"Carousel__button Carousel__button--prev\"\n//         onClick={() => {\n//           prevMove();\n//         }}\n//       />\n//       <div\n//         className=\"Carousel__wrapper\"\n//         style={{ width: `${frameSize * itemWidth}px` }}\n//       >\n//         <ul\n//           className=\"Carousel__container\"\n//           style={{\n//             transform: `translateX(${-(countImages * itemWidth)}px)`,\n//             transitionDuration: `${animationDuration}ms`,\n//           }}\n//         >\n//           {\n//             newImagesArr.map((image) => {\n//               return (\n//                 <li key={image} className=\"Carousel__image\">\n//                   <img\n//                     src={image}\n//                     alt=\"1\"\n//                     style={{ width: `${itemWidth}px` }}\n//                   />\n//                 </li>\n//               );\n//             })\n//           }\n//         </ul>\n//       </div>\n//       {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n//       <button\n//         type=\"button\"\n//         data-cy=\"next\"\n//         disabled={!infinite ? countImages + frameSize >= images.length : false}\n//         className=\"Carousel__button Carousel__button--next\"\n//         onClick={() => {\n//           nextMove();\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    imagesArr: [...this.props.images],\n    countImages: 0,\n    isTransition: false,\n    isNext: false,\n  };\n\n  // componentDidMount() {\n  //   this.setState(() => {\n  //     return { imagesArr: [...this.props.images] };\n  //   });\n  //   console.log('didMount');\n  //   console.log(this.state.imagesArr);\n  // }\n  componentDidUpdate() {\n    const {\n      isNext,\n      isTransition,\n    } = this.state;\n    const {\n      infinite,\n      animationDuration,\n    } = this.props;\n\n    if (isTransition && infinite && isNext) {\n      setTimeout(() => this.updateImagesArr(), animationDuration);\n    } else if (!isTransition && infinite\n      && !isNext && this.state.countImages !== 0) {\n      setTimeout(() => {\n        this.setState((state) => {\n          return {\n            countImages: state.countImages - this.props.step,\n            isTransition: true,\n          };\n        });\n      }, 100);\n    }\n  }\n\n  updateImagesArr() {\n    const {\n      step,\n    } = this.props;\n\n    this.setState((state) => {\n      return {\n        imagesArr: [\n          ...state.imagesArr.slice(step),\n          ...state.imagesArr.slice(0, step),\n        ],\n        countImages: state.countImages - step,\n        isTransition: false,\n      };\n    });\n  }\n\n  nextMove() {\n    const {\n      images,\n      step,\n      frameSize,\n    } = this.props;\n\n    const countSteps = this.state.countImages + step;\n    const leftSpace = images.length - frameSize < step\n    || images.length - step <= step\n      ? images.length - Math.min(frameSize, step)\n      : Math.min(images.length - step, images.length - frameSize);\n\n    this.setState({\n      countImages: Math.min(countSteps, leftSpace),\n      isTransition: true,\n      isNext: true,\n    });\n  }\n\n  prevMove() {\n    const { step, infinite, images } = this.props;\n    const countSteps = this.state.countImages - step;\n\n    if (infinite) {\n      this.setState((state) => {\n        return {\n          imagesArr: [\n            ...state.imagesArr.slice(images.length - step),\n            ...state.imagesArr.slice(0, images.length - step),\n          ],\n          countImages: step,\n          isNext: false,\n          isTransition: false,\n        };\n      });\n    } else {\n      this.setState({ countImages: Math.max(countSteps, 0) });\n    }\n  }\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const {\n      countImages,\n      imagesArr,\n      isTransition,\n    } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n        <button\n          type=\"button\"\n          disabled={!infinite ? countImages === 0 : false}\n          className=\"Carousel__button Carousel__button--prev\"\n          onClick={() => {\n            this.prevMove();\n          }}\n        />\n        <div\n          className=\"Carousel__wrapper\"\n          style={{ width: `${frameSize * itemWidth}px` }}\n        >\n          <ul\n            className=\"Carousel__container\"\n            style={{\n              transform: `translateX(${-(countImages * itemWidth)}px)`,\n              transitionDuration: `${isTransition ? animationDuration : 0}ms`,\n            }}\n          >\n            {\n              imagesArr.map((image) => {\n                return (\n                  <li key={image} className=\"Carousel__image\">\n                    <img\n                      src={image}\n                      alt=\"1\"\n                      width={`${itemWidth}`}\n                    />\n                  </li>\n                );\n              })\n            }\n          </ul>\n        </div>\n        {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          disabled={!infinite\n            ? countImages + frameSize >= images.length\n            : false}\n          className=\"Carousel__button Carousel__button--next\"\n          onClick={() => {\n            this.nextMove();\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      animationDuration,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\" className=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n        <div className=\"settings\">\n          <label className=\"inputWrapper\">\n            Item width:\n            <input\n              type=\"number\"\n              name=\"itemWidth\"\n              value={itemWidth}\n              onChange={(event) => {\n                this.setState({\n                  itemWidth: Number(event.target.value),\n                });\n              }}\n            />\n          </label>\n          <label className=\"inputWrapper\">\n            Frame size:\n            <input\n              type=\"number\"\n              name=\"frameSize\"\n              min=\"1\"\n              max=\"10\"\n              value={frameSize}\n              onChange={(event) => {\n                this.setState({\n                  frameSize: Number(event.target.value),\n                });\n              }}\n            />\n          </label>\n          <label htmlFor=\"stepId\" className=\"inputWrapper\">\n            Step:\n            <input\n              id=\"stepId\"\n              type=\"number\"\n              name=\"step\"\n              min=\"1\"\n              max=\"10\"\n              value={step}\n              onChange={(event) => {\n                this.setState({\n                  step: Number(event.target.value),\n                });\n              }}\n            />\n          </label>\n          <label className=\"inputWrapper\">\n            Animation duration:\n            <input\n              type=\"number\"\n              name=\"animationDuration\"\n              value={animationDuration}\n              onChange={(event) => {\n                this.setState({\n                  animationDuration: Number(event.target.value),\n                });\n              }}\n            />\n          </label>\n          <label className=\"inputWrapper checkbox\">\n            Infinite:\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              checked={infinite}\n              onChange={(event) => {\n                this.setState({\n                  infinite: event.target.checked,\n                });\n              }}\n            />\n          </label>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}